makeCacheMatrix <- function(x = matrix()) {
# Initialize the cache
cache <- NULL
# Setter function to set the matrix
setMatrix <- function(newValue) {
x <<- newValue
cache <<- NULL  # Clear the cache when the matrix is set
}
# Getter function to get the matrix
getMatrix <- function() {
x
}
cacheInverse <- function() {
if (!is.null(cache)) {
message("Getting cached inverse")
return(cache)
}
if (is.null(x) || !is.matrix(x) || !all(dim(x) == c(ncol(x), ncol(x)))) {
stop("Input is not a valid square matrix.")
}
message("Calculating and caching the inverse")
cache <- solve(x)
cache
}
getInverse <- function() {
if (!is.null(cache)) {
message("Getting cached inverse")
return(cache)
} else {
message("No cached inverse available.")
return(NULL)
}
}
list(setMatrix = setMatrix, getMatrix = getMatrix, cacheInverse = cacheInverse, getInverse = getInverse)
}
cacheable_matrix <- makeCacheMatrix(matrix(c(4, 2, 2, 3), 2, 2))
cacheable_matrix$setMatrix(matrix(c(4, 7, 2, 3), 2, 2))
cacheable_matrix$cacheInverse()
cached_inverse <- cacheable_matrix$getInverse()
cacheable_matrix <- makeCacheMatrix(matrix(c(4, 2, 2, 3), 2, 2))
inverse1 <- cacheSolve(cacheable_matrix)
cacheSolve <- function(x, ...) {
# Check if a cached inverse exists
cached_inverse <- x$getInverse()
# If a cached inverse exists, return it
if (!is.null(cached_inverse)) {
message("Retrieving cached inverse")
return(cached_inverse)
} else {
message("Calculating the inverse since no cached inverse exists")
# Calculate and cache the inverse
inverse <- x$cacheInverse()
return(inverse)
}
## Return a matrix that is the inverse of 'x'
}
cacheable_matrix <- makeCacheMatrix(matrix(c(4, 7, 2, 3), 2, 2))
inverse1 <- cacheSolve(cacheable_matrix)
inverse2 <- cacheSolve(cacheable_matrix)
